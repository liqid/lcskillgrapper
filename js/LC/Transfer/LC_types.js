//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

if (typeof LC === 'undefined') {
  LC = {};
}
if (typeof LC.Transfer === 'undefined') {
  LC.Transfer = {};
}
LC.Transfer.SkillType = {
'ACTIVE' : 0,
'PASSIVE' : 1
};
LC.Transfer.Unit = {
'NONE' : 0,
'PERCENT' : 1,
'SECONDS' : 2
};
LC.Transfer.Character = function(args) {
  this.characterId = null;
  this.name = null;
  if (args) {
    if (args.characterId !== undefined) {
      this.characterId = args.characterId;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
LC.Transfer.Character.prototype = {};
LC.Transfer.Character.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.characterId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LC.Transfer.Character.prototype.write = function(output) {
  output.writeStructBegin('Character');
  if (this.characterId !== null && this.characterId !== undefined) {
    output.writeFieldBegin('characterId', Thrift.Type.I32, 1);
    output.writeI32(this.characterId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LC.Transfer.ConditionType = function(args) {
  this.conditionTypeId = null;
  this.name = null;
  if (args) {
    if (args.conditionTypeId !== undefined) {
      this.conditionTypeId = args.conditionTypeId;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
LC.Transfer.ConditionType.prototype = {};
LC.Transfer.ConditionType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.conditionTypeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LC.Transfer.ConditionType.prototype.write = function(output) {
  output.writeStructBegin('ConditionType');
  if (this.conditionTypeId !== null && this.conditionTypeId !== undefined) {
    output.writeFieldBegin('conditionTypeId', Thrift.Type.I32, 1);
    output.writeI32(this.conditionTypeId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LC.Transfer.Condition = function(args) {
  this.conditionId = null;
  this.conditionType = null;
  this.value = null;
  if (args) {
    if (args.conditionId !== undefined) {
      this.conditionId = args.conditionId;
    }
    if (args.conditionType !== undefined) {
      this.conditionType = args.conditionType;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
LC.Transfer.Condition.prototype = {};
LC.Transfer.Condition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.conditionId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.conditionType = new LC.Transfer.ConditionType();
        this.conditionType.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LC.Transfer.Condition.prototype.write = function(output) {
  output.writeStructBegin('Condition');
  if (this.conditionId !== null && this.conditionId !== undefined) {
    output.writeFieldBegin('conditionId', Thrift.Type.I32, 1);
    output.writeI32(this.conditionId);
    output.writeFieldEnd();
  }
  if (this.conditionType !== null && this.conditionType !== undefined) {
    output.writeFieldBegin('conditionType', Thrift.Type.STRUCT, 2);
    this.conditionType.write(output);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 3);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LC.Transfer.EffectType = function(args) {
  this.effectTypeId = null;
  this.name = null;
  this.unit = null;
  if (args) {
    if (args.effectTypeId !== undefined) {
      this.effectTypeId = args.effectTypeId;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.unit !== undefined) {
      this.unit = args.unit;
    }
  }
};
LC.Transfer.EffectType.prototype = {};
LC.Transfer.EffectType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.effectTypeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.unit = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LC.Transfer.EffectType.prototype.write = function(output) {
  output.writeStructBegin('EffectType');
  if (this.effectTypeId !== null && this.effectTypeId !== undefined) {
    output.writeFieldBegin('effectTypeId', Thrift.Type.I32, 1);
    output.writeI32(this.effectTypeId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.unit !== null && this.unit !== undefined) {
    output.writeFieldBegin('unit', Thrift.Type.I32, 3);
    output.writeI32(this.unit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LC.Transfer.Effect = function(args) {
  this.effectId = null;
  this.effectType = null;
  this.value = null;
  if (args) {
    if (args.effectId !== undefined) {
      this.effectId = args.effectId;
    }
    if (args.effectType !== undefined) {
      this.effectType = args.effectType;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
LC.Transfer.Effect.prototype = {};
LC.Transfer.Effect.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.effectId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.effectType = new LC.Transfer.EffectType();
        this.effectType.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.value = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LC.Transfer.Effect.prototype.write = function(output) {
  output.writeStructBegin('Effect');
  if (this.effectId !== null && this.effectId !== undefined) {
    output.writeFieldBegin('effectId', Thrift.Type.I32, 1);
    output.writeI32(this.effectId);
    output.writeFieldEnd();
  }
  if (this.effectType !== null && this.effectType !== undefined) {
    output.writeFieldBegin('effectType', Thrift.Type.STRUCT, 2);
    this.effectType.write(output);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LC.Transfer.Tier = function(args) {
  this.tierId = null;
  this.sp = null;
  this.mana = null;
  this.effects = null;
  this.conditions = null;
  this.money = null;
  if (args) {
    if (args.tierId !== undefined) {
      this.tierId = args.tierId;
    }
    if (args.sp !== undefined) {
      this.sp = args.sp;
    }
    if (args.mana !== undefined) {
      this.mana = args.mana;
    }
    if (args.effects !== undefined) {
      this.effects = args.effects;
    }
    if (args.conditions !== undefined) {
      this.conditions = args.conditions;
    }
    if (args.money !== undefined) {
      this.money = args.money;
    }
  }
};
LC.Transfer.Tier.prototype = {};
LC.Transfer.Tier.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.tierId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.sp = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.mana = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.SET) {
        var _size0 = 0;
        var _rtmp34;
        this.effects = [];
        var _etype3 = 0;
        _rtmp34 = input.readSetBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new LC.Transfer.Effect();
          elem6.read(input);
          this.effects.push(elem6);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.SET) {
        var _size7 = 0;
        var _rtmp311;
        this.conditions = [];
        var _etype10 = 0;
        _rtmp311 = input.readSetBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = new LC.Transfer.Condition();
          elem13.read(input);
          this.conditions.push(elem13);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.money = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LC.Transfer.Tier.prototype.write = function(output) {
  output.writeStructBegin('Tier');
  if (this.tierId !== null && this.tierId !== undefined) {
    output.writeFieldBegin('tierId', Thrift.Type.I32, 1);
    output.writeI32(this.tierId);
    output.writeFieldEnd();
  }
  if (this.sp !== null && this.sp !== undefined) {
    output.writeFieldBegin('sp', Thrift.Type.I32, 2);
    output.writeI32(this.sp);
    output.writeFieldEnd();
  }
  if (this.mana !== null && this.mana !== undefined) {
    output.writeFieldBegin('mana', Thrift.Type.I32, 3);
    output.writeI32(this.mana);
    output.writeFieldEnd();
  }
  if (this.effects !== null && this.effects !== undefined) {
    output.writeFieldBegin('effects', Thrift.Type.SET, 4);
    output.writeSetBegin(Thrift.Type.STRUCT, this.effects.length);
    for (var iter14 in this.effects)
    {
      if (this.effects.hasOwnProperty(iter14))
      {
        iter14 = this.effects[iter14];
        iter14.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.conditions !== null && this.conditions !== undefined) {
    output.writeFieldBegin('conditions', Thrift.Type.SET, 5);
    output.writeSetBegin(Thrift.Type.STRUCT, this.conditions.length);
    for (var iter15 in this.conditions)
    {
      if (this.conditions.hasOwnProperty(iter15))
      {
        iter15 = this.conditions[iter15];
        iter15.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.money !== null && this.money !== undefined) {
    output.writeFieldBegin('money', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.money);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LC.Transfer.Skill = function(args) {
  this.skillId = null;
  this.name = null;
  this.character = null;
  this.info = null;
  this.type = null;
  this.tiers = null;
  this.iconURL = null;
  if (args) {
    if (args.skillId !== undefined) {
      this.skillId = args.skillId;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.character !== undefined) {
      this.character = args.character;
    }
    if (args.info !== undefined) {
      this.info = args.info;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.tiers !== undefined) {
      this.tiers = args.tiers;
    }
    if (args.iconURL !== undefined) {
      this.iconURL = args.iconURL;
    }
  }
};
LC.Transfer.Skill.prototype = {};
LC.Transfer.Skill.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.skillId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.character = new LC.Transfer.Character();
        this.character.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.info = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.SET) {
        var _size16 = 0;
        var _rtmp320;
        this.tiers = [];
        var _etype19 = 0;
        _rtmp320 = input.readSetBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new LC.Transfer.Tier();
          elem22.read(input);
          this.tiers.push(elem22);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.iconURL = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LC.Transfer.Skill.prototype.write = function(output) {
  output.writeStructBegin('Skill');
  if (this.skillId !== null && this.skillId !== undefined) {
    output.writeFieldBegin('skillId', Thrift.Type.I32, 1);
    output.writeI32(this.skillId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.character !== null && this.character !== undefined) {
    output.writeFieldBegin('character', Thrift.Type.STRUCT, 3);
    this.character.write(output);
    output.writeFieldEnd();
  }
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.STRING, 4);
    output.writeString(this.info);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 5);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.tiers !== null && this.tiers !== undefined) {
    output.writeFieldBegin('tiers', Thrift.Type.SET, 6);
    output.writeSetBegin(Thrift.Type.STRUCT, this.tiers.length);
    for (var iter23 in this.tiers)
    {
      if (this.tiers.hasOwnProperty(iter23))
      {
        iter23 = this.tiers[iter23];
        iter23.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.iconURL !== null && this.iconURL !== undefined) {
    output.writeFieldBegin('iconURL', Thrift.Type.STRING, 7);
    output.writeString(this.iconURL);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

