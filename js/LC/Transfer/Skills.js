//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

LC.Transfer.Skills_send_args = function(args) {
  this.skill = null;
  if (args) {
    if (args.skill !== undefined) {
      this.skill = args.skill;
    }
  }
};
LC.Transfer.Skills_send_args.prototype = {};
LC.Transfer.Skills_send_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.skill = new LC.Transfer.Skill();
        this.skill.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LC.Transfer.Skills_send_args.prototype.write = function(output) {
  output.writeStructBegin('Skills_send_args');
  if (this.skill !== null && this.skill !== undefined) {
    output.writeFieldBegin('skill', Thrift.Type.STRUCT, 1);
    this.skill.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LC.Transfer.Skills_send_result = function(args) {
};
LC.Transfer.Skills_send_result.prototype = {};
LC.Transfer.Skills_send_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LC.Transfer.Skills_send_result.prototype.write = function(output) {
  output.writeStructBegin('Skills_send_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LC.Transfer.Skills_getId_args = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
LC.Transfer.Skills_getId_args.prototype = {};
LC.Transfer.Skills_getId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LC.Transfer.Skills_getId_args.prototype.write = function(output) {
  output.writeStructBegin('Skills_getId_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LC.Transfer.Skills_getId_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
LC.Transfer.Skills_getId_result.prototype = {};
LC.Transfer.Skills_getId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
        console.log(this.success);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LC.Transfer.Skills_getId_result.prototype.write = function(output) {
  output.writeStructBegin('Skills_getId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LC.Transfer.SkillsClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
LC.Transfer.SkillsClient.prototype = {};
LC.Transfer.SkillsClient.prototype.send = function(skill, callback) {
  if (callback === undefined) {
    this.send_send(skill);
  } else {
    var postData = this.send_send(skill, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_send);
  }
};

LC.Transfer.SkillsClient.prototype.send_send = function(skill, callback) {
  this.output.writeMessageBegin('send', Thrift.MessageType.CALL, this.seqid);
  var args = new LC.Transfer.Skills_send_args();
  args.skill = skill;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};
LC.Transfer.SkillsClient.prototype.getId = function(name, callback) {
  if (callback === undefined) {
    this.send_getId(name);
    return this.recv_getId();
  } else {
	if (typeof callback == "function") {
		this.callback = callback;
	}
    var postData = this.send_getId(name, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getId);
  }
};

LC.Transfer.SkillsClient.prototype.send_getId = function(name, callback) {
  this.output.writeMessageBegin('getId', Thrift.MessageType.CALL, this.seqid);
  var args = new LC.Transfer.Skills_getId_args();
  args.name = name;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

LC.Transfer.SkillsClient.prototype.recv_getId = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new LC.Transfer.Skills_getId_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
	tis.callback && this.callback(result.success);
    return result.success;
  }
  throw 'getId failed: unknown result';
};
